// <auto-generated />
using System;
using CVBuilder.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CVBuilder.Repository.Migrations
{
    [DbContext(typeof(CVBuilderDbContext))]
    [Migration("20200419200941_TemplateContextSeed")]
    partial class TemplateContextSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CVBuilder.Domain.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("InProgress")
                        .HasColumnType("bit");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("OnlineMode")
                        .HasColumnType("bit");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("CertificateId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Curriculum", b =>
                {
                    b.Property<int>("CurriculumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CertificatesIsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomSectionsIsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Id_Template")
                        .HasColumnType("int");

                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<bool>("InterestsIsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("LanguagesIsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("PersonalReferencesIsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("SkillsIsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("StudiesIsVisible")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkExperiencesIsVisible")
                        .HasColumnType("bit");

                    b.HasKey("CurriculumId");

                    b.HasIndex("Id_Template");

                    b.HasIndex("Id_User")
                        .IsUnique();

                    b.ToTable("Curriculum");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.CustomSection", b =>
                {
                    b.Property<int>("CustomSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CustomSectionId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("CustomSections");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Interest", b =>
                {
                    b.Property<int>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("InterestId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("LanguageId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.PersonalDetail", b =>
                {
                    b.Property<int>("PersonalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("AreaCodeLP")
                        .HasColumnType("smallint");

                    b.Property<short?>("AreaCodeMP")
                        .HasColumnType("smallint");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("GithubUrl")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("LinePhone")
                        .HasColumnType("int");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("MobilePhone")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoMimeType")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("SummaryCustomTitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("SummaryIsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("WebPageUrl")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("PersonalDetailId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("PersonalDetails");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.PersonalReference", b =>
                {
                    b.Property<int>("PersonalReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("AreaCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("Telephone")
                        .HasColumnType("int");

                    b.HasKey("PersonalReferenceId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("PersonalReferences");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SkillId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Study", b =>
                {
                    b.Property<int>("StudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("EndMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("StartMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StudyId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateId");

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            TemplateId = 1,
                            Name = "Classic",
                            Path = "/img/templates/classic.png"
                        },
                        new
                        {
                            TemplateId = 2,
                            Name = "Elegant",
                            Path = "/img/templates/elegant.png"
                        },
                        new
                        {
                            TemplateId = 3,
                            Name = "Modern",
                            Path = "/img/templates/modern.png"
                        });
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("EndMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("Id_Curriculum")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StartMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("Id_Curriculum");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Certificate", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("Certificates")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Curriculum", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Template", "Template")
                        .WithMany("Curriculum")
                        .HasForeignKey("Id_Template")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVBuilder.Domain.Models.User", "User")
                        .WithOne("Curriculum")
                        .HasForeignKey("CVBuilder.Domain.Models.Curriculum", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.CustomSection", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("CustomSections")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Interest", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("Interests")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Language", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("Languages")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.PersonalDetail", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.PersonalReference", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("PersonalReferences")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Skill", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("Skills")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.Study", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("Studies")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVBuilder.Domain.Models.WorkExperience", b =>
                {
                    b.HasOne("CVBuilder.Domain.Models.Curriculum", "Curriculum")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("Id_Curriculum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
